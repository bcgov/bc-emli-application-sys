---
openapi: 3.1.0
info:
  title: Integration API V1
  version: v1
  description: "### API documentation overview\nThis document provides detailed information
    about the APIs available for external integrators to query and retrieve submitted
    and resubmitted permit applications.\nIt also includes specifications on webhook
    events that notify your systems in real-time.\n\n### Data scope:\nThe permit applications
    returned by these APIs are limited to those within the jurisdiction associated
    with the API key used for the request. This\nensures that each integrator has
    access solely to relevant data.\n\n### Integration steps:\nTo integrate with our
    APIs, please contact the Building Permit Hub team to enable your API access. Your
    local jurisdiction can then obtain the API key\nand register your webhook URL
    in their configuration settings on the building permit hub. You can reach us directly
    at <digital.codes.permits@gov.bc.ca>\nfor further assistance.\n\n### Authentication
    and authorization:\nAccess to these APIs is controlled via an API key, which must
    be included in the Authorization header as a Bearer token like so:\n```\nAuthorization:
    Bearer {Your_API_Key_Here}\n```\nPlease note that a unique API key is required
    for each jurisdiction you wish to access, enhancing security and data integrity.\n\n###
    Rate limits:\nTo ensure fair usage, the API is rate-limited to 100 requests per
    minute per API key and 300 requests per IP in a 3 minute interval. Exceeding these\nlimits
    will result in a 429 response. If this occurs, we recommend spacing out your requests.
    Continued exceeding of rate limits\nmay necessitate further contact with the building
    permit hub team.\n\n### Api base path:\nThe base path for all API endpoints is
    `/external_api/v1`.\n\n### Server information for testing:\nBy default the requests
    from the documentation will be sent to the current environment servers. For testing
    purposes, you can specify a different server using the {serverUrl} variable.\nDuring
    your integration testing phase, you have the flexibility to use custom URLs by
    configuring the serverUrl variable. This allows you to\ntailor the API environment
    to better suit your development needs. Ensure that your custom URLs are configured
    correctly to avoid any connectivity or data access issues.\n\n### Special considerations:\nA
    returned permit application will have a status of either `newly_submitted` for
    permit applications submitted for the first time, or `resubmitted` for\npermit
    applications that have been resubmitted due to revision requests. The `resubmitted_at`
    field will indicate the timestamp of the latest resubmission.\nWhile there may
    be multiple resubmissions, the submission data payload returned will reflect the
    most recent submission data. \n\nFor security purposes, any API response that
    includes a file URL will have a signed URL. These files will be available for
    download for a limited time (1 hour).\nWe recommend downloading the file immediately
    upon receiving the URL to avoid any issues. If necessary, you can always call
    the API again to retrieve a\nnew file URL.\n\n### Visual aids and examples:\nFor
    a better understanding of how our APIs work, including webhook setups and request
    handling, please refer to the code examples included later\nin this document.\n"
webhooks:
  application_submitted:
    tags:
      - Webhooks
    post:
      requestBody:
        description: |-
          ### Request body:
          This webhook sends information about a recently submitted 
                  application in a JSON format to the webhook URL specified by the external integrator.
          It includes
                  the application ID, which can be used to fetch the complete details of the application using the
                  `GET/applications/{id}` endpoint.

          ### Retries:
          If the webhook does not receive a 200 status response
                  from the external integrator, it will attempt to resend the notification up to 8 times using an exponential backoff
                  strategy. This ensures multiple attempts to deliver the webhook in case of temporary issues on the receiving end.


          ### Expected responses:
          The external integrator is expected to return a 200 status code to confirm successful receipt
                  of the data. This acknowledgment indicates that the payload was received and processed without issues
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/WebhookPayload'
      responses:
        '200':
          description: The external integrator should return a 200 status to indicate
            that the data was received successfully.
  permit_resubmitted:
    tags:
      - Webhooks
    post:
      requestBody:
        description: |-
          ### Request body:
          This webhook sends information about a recently resubmitted 
            application. An application can be resubmitted due to revision requests. 
            After resubmission a payload is sent in JSON format to the webhook URL specified by the external integrator.
          It includes
                  the application ID, which can be used to fetch the complete details of the application using the
                  `GET/applications/{id}` endpoint.

          ### Retries:
          If the webhook does not receive a 200 status response
                  from the external integrator, it will attempt to resend the notification up to 8 times using an exponential backoff
                  strategy. This ensures multiple attempts to deliver the webhook in case of temporary issues on the receiving end.


          ### Expected responses:
          The external integrator is expected to return a 200 status code to confirm successful receipt
                  of the data. This acknowledgment indicates that the payload was received and processed without issues
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/WebhookPayload'
      responses:
        '200':
          description: The external integrator should return a 200 status to indicate
            that the data was received successfully.
paths:
  '/applications/search':
    post:
      summary: This endpoint retrieves a list of applications in a paginated
        format. It gives you a list of applications that are currently in review.
      tags:
        - Applications
      parameters: []
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: Applications in review
                    items:
                      '$ref': '#/components/schemas/PermitApplication'
                  meta:
                    type: object
                    properties:
                      total_pages:
                        type: integer
                        description: Total number of pages
                      total_count:
                        type: integer
                        description: Total number of applications
                      current_page:
                        type: integer
                        description: Current page number
                    required:
                      - total_pages
                      - total_count
                      - current_page
                required:
                  - data
                  - meta
        '429':
          description: 'Rate limit exceeded. Note: The rate limit is 100 requests
            per minute per API key and 300 requests per IP in a 3 minute interval'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ResponseError'
      requestBody:
        required: false
  '/applications/{id}':
    get:
      summary: This endpoint retrieves detailed information about a specific permit
        application using its unique identifier (ID). Please note that requests to
        this endpoint are subject to rate limiting to ensure optimal performance and
        fair usage.
      parameters:
        - name: id
          in: path
          description: Submitted permit application id
          required: true
          schema:
            type: string
      tags:
        - Applications
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    '$ref': '#/components/schemas/PermitApplication'
                required:
                  - data
        '403':
          description: Accessing a permit application for unauthorized jurisdiction
        '404':
          description: Accessing a permit application which does not exist
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ResponseError'
  '/applications/versions/{version_id}/integration_mapping':
    get:
      summary: This endpoint retrieves the integration mapping between the Building
        Permit Hub system and the local jurisdictionâ€™s integration system. It uses
        a unique ID associated with a specific version of the permit template.
      parameters:
        - name: version_id
          in: path
          description: This identifier corresponds to a specific version of the permit
            template, distinct from the permit application ID, which uniquely identifies
            an individual permit application.
          required: true
          schema:
            type: string
      tags:
        - Applications
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    '$ref': '#/components/schemas/IntegrationMapping'
                required:
                  - data
        '404':
          description: Accessing a integration mapping which does not exist
        '429':
          description: 'Rate limit exceeded. Note: The rate limit is 100 requests
            per minute per API key and 300 requests per IP in a 3 minute interval'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ResponseError'
servers:
  - url: '/external_api/v1'
    description: Current environment server
  - url: '{serverUrl}/external_api/v1'
    description: Server url
    variables:
      serverUrl:
        default:
tags:
  - name: Applications
    description: Submitted applications (scoped to Program API key)
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      description: Bearer token
  schemas:
    Application:
      type: object
      properties:
        id:
          type: string
        full_address:
          type: string
          description: The full address of the application.
          nullable: true
        number:
          type: string
          description: The application number displayed to the user.
          nullable: true
        reference_number:
          type: string
          description: The reference number of the application in external
            system.
          nullable: true
        submitted_at:
          type: number
          format: int64
          description: Datetime in milliseconds since the epoch (Unix time). This
            is the timestamp when the application was first submitted.
        resubmitted_at:
          type: number
          format: int64
          description: 'Datetime in milliseconds since the epoch (Unix time). This
            is the timestamp when the application was last resubmitted due
            to a revision request. Note: there might be multiple resubmissions for
            a application, but this date is the last resubmission date.'
          nullable: true
        submission_type:
          type: string
          enum:
            - application
            - invoice
            - onboarding
            - support_request
          description: The type of application submitted.
        user_group_type:
          type: string
          enum:
            - participant
            - contractor
          description: The user group that the application belongs to.
        account_holder:
          '$ref': '#/components/schemas/AccountHolder'
        application_version:
          '$ref': '#/components/schemas/ApplicationVersion'
        submission_data:
          '$ref': '#/components/schemas/SubmissionData'
    SubmissionData:
      type: object
      description: 'The submitted permit application data. This will reflect the most
        recent submitted data in case of resubmission. Note: the keys are the requirement
        block codes.'
      additionalProperties:
        type: object
        properties:
          id:
            type: string
            description: The ID of the requirement block.
          requirement_block_code:
            type: string
            description: The code of the requirement block. This is unique within
              the permit application.
          name:
            type: string
            description: The name/label of the requirement block.
          description:
            type: string
            description: The description of the requirement block.
            nullable: true
          requirements:
            type: array
            descriptions: The requirements for this requirement block and their submitted
              values.
            items:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the requirement.
                name:
                  type: string
                  description: The name/label of the requirement.
                requirement_code:
                  type: string
                  description: The requirement code for this requirement field. This
                    is unique within the requirement block.
                type:
                  type: string
                  enum:
                    - text
                    - number
                    - checkbox
                    - select
                    - multi_option_select
                    - date
                    - textarea
                    - file
                    - phone
                    - email
                    - radio
                    - address
                    - bcaddress
                    - signature
                    - energy_step_code
                    - general_contact
                    - professional_contact
                    - pid_info
                  description: The input type for this requirement.
                value:
                  description: The submitted value for this requirement.
                  oneOf:
                    - type: string
                    - type: number
                    - type: boolean
                    - '$ref': '#/components/schemas/ContactSubmissionValue'
                    - '$ref': '#/components/schemas/MultiOptionSubmissionValue'
                    - '$ref': '#/components/schemas/FileSubmissionValue'
              required:
                - id
                - name
                - requirement_code
                - type
                - value
        required:
          - id
          - requirement_block_code
          - name
          - requirements
    Classification:
      type: object
      description: This object represents a classification. e.g. a user group type (participant/contractor)
        or submission type (application/invoice).
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
          nullable: true
        code:
          type: string
          description: The code of the classification.
    ApplicationVersion:
      type: object
      description: The object represents the application version.
      properties:
        id:
          type: string
          description: The ID of the version. This can be used to retrieve the integration
            mapping for this version.
        version_date:
          type: integer
          format: int64
          description: The version date in milliseconds since the epoch (UNIX time).
            This is meant to be parsed as PST.
        status:
          type: string
          enum:
            - published
            - deprecated
          description: The status of the version.
    IntegrationMapping:
      type: object
      description: The integration mapping for a specific application version.
      properties:
        id:
          type: string
          description: The ID of the integration mapping.
        application_version:
          '$ref': '#/components/schemas/ApplicationVersion'
        requirements_mapping:
          '$ref': '#/components/schemas/RequirementsMapping'
    RequirementsMapping:
      type: object
      description: 'The mapping of the requirements. Note: the top level keys
        are the requirement block codes.'
      additionalProperties:
        type: object
        description: The requirement block mapping. This contains a requirements hash,
          where the keys are the requirement codes and the value is another hash containing
          the field mapping to the system.
        properties:
          id:
            type: string
            description: The ID of the requirement block.
          requirements:
            type: object
            description: A hash of the requirement code to the system field mapping.
            additionalProperties:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the requirement.
                local_system_mapping:
                  type: string
                  description: The local integration system field mapping for this
                    requirement. This should be the field name of the requirement
                    in your system.
              required:
                - id
                - local_system_mapping
        required:
          - id
          - requirements
    MultiOptionSubmissionValue:
      type: object
      description: The submission value for requirement input types, which are limited
        to a set of options. e.g. an option from a select drop down, or checkboxes.
      additionalProperties:
        type: boolean
        description: The key is the option value, and the value is a boolean indicating
          if the option was selected.
    ContactSubmissionValue:
      type: array
      description: The contact submission value. It is an array of contact objects.
      items:
        type: object
        properties:
          first_name:
            type: string
            description: The first name of the contact.
          last_name:
            type: string
            description: The last name of the contact.
          email:
            type: string
            description: The email of the contact.
          phone:
            type: string
            description: The phone number of the contact.
          address:
            type: string
            description: The address of the contact.
          title:
            type: string
            description: The title of the contact.
          organization:
            type: string
            description: The organization of the contact.
    FileSubmissionValue:
      description: 'The file submission value. It is an array of file objects. Note:
        the urls are signed and will expire after 1 hour.'
      type: array
      items:
        '$ref': '#/components/schemas/File'
    File:
      type: object
      properties:
        id:
          type: string
          description: The ID of the file.
        name:
          type: string
          description: The name of the file.
        size:
          type: integer
          description: The size of the file in bytes.
        type:
          type: string
          description: The type of the file. e.g. image/png, application/pdf, etc.
        url:
          type: string
          format: url
          description: The signed URL to download the file.
    AccountHolder:
      type: object
      description: The account holder of the permit application.
      properties:
        id:
          type: string
          description: The ID of the account holder.
        email:
          type: string
          description: The email of the account holder.
        first_name:
          type: string
          description: The first name of the account holder.
        last_name:
          type: string
          description: The last name of the account holder.
    ResponseError:
      type: object
      properties:
        data:
          type: object
          properties: {}
        meta:
          type: object
          properties:
            message:
              type: string
              description: The error message.
            type:
              type: string
              enum:
                - error
    WebhookPayload:
      type: object
      properties:
        event:
          type: string
          enum:
            - permit_submitted
            - permit_resubmitted
          description: The event type.
        payload:
          type: object
          properties:
            permit_id:
              type: string
              description: The permit application ID.
            submitted_at:
              type: integer
              format: int64
              description: The timestamp of when the permit application was submitted
                or resubmitted. This is in milliseconds since the epoch (UNIX time).
formats:
  - json
  - yaml
security:
  - Bearer: []
