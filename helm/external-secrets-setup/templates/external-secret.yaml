apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: s3-rotated-credentials
  namespace: {{ .Values.app.namespace }}
  labels:
    app.kubernetes.io/name: external-secrets-setup
    app.kubernetes.io/component: external-secret
spec:
  refreshInterval: {{ .Values.app.parameterStore.refreshInterval }}
  secretStoreRef:
    name: aws-parameter-store
    kind: SecretStore
  target:
    name: s3-access-keys
    type: Opaque
    creationPolicy: Owner
    deletionPolicy: Retain
  data:
  # Extract current (non-pending_deletion) credentials from Parameter Store JSON
  - secretKey: access-key-id
    remoteRef:
      key: /iam_users/{{ .Values.app.parameterStore.iamUsername }}_keys
      property: current.AccessKeyID
  - secretKey: secret-access-key
    remoteRef:
      key: /iam_users/{{ .Values.app.parameterStore.iamUsername }}_keys
      property: current.SecretAccessKey
  
  # Optional: Extract pending_deletion for monitoring/debugging
  - secretKey: pending-access-key-id
    remoteRef:
      key: /iam_users/{{ .Values.app.parameterStore.iamUsername }}_keys
      property: pending_deletion.AccessKeyID
    # This will be empty/null when no pending deletion exists
---
# Monitoring ExternalSecret for alerts
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: s3-credentials-status
  namespace: {{ .Values.app.namespace }}
  labels:
    app.kubernetes.io/name: external-secrets-setup
    app.kubernetes.io/component: monitoring
spec:
  refreshInterval: {{ .Values.app.parameterStore.refreshInterval }}
  secretStoreRef:
    name: aws-parameter-store
    kind: SecretStore
  target:
    name: s3-credentials-metadata
    type: Opaque
    creationPolicy: Owner
  data:
  # Extract full JSON for monitoring purposes
  - secretKey: full-credential-json
    remoteRef:
      key: /iam_users/{{ .Values.app.parameterStore.iamUsername }}_keys