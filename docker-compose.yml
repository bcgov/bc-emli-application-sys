# NOTE: this is a minimal setup to get going in LOCAL development only, this is not intended for production use (the project is hoste on Openshift, see devops folder for helm charts)

#  Dummy shared ENV vars
x-env-vars: &default-env-vars
  BROWSER: "true" # so that launchy does not error out - @TODO: figure out local emails in docker compose environment
  RAILS_ENV: development
  REDIS_URL: redis://redis:6379/0
  ANYCABLE_REDIS_URL: redis://redis:6379/1
  ANYCABLE_URL: ws://localhost:8080/cable
  RATE_LIMIT_DEV_REDIS_URL: redis://redis:6379/2
  SIMPLE_FEED_DEV_REDIS_URL: redis://redis:6379/3
  CACHE_DEV_REDIS_URL: redis://redis:6379/4
  DEVISE_JWT_SECRET_KEY: supersecret
  DATABASE_URL: postgres://postgres:password@postgres:5432/app_development
  ELASTICSEARCH_URL: http://elasticsearch:9200

services:
  app:
    image: hous-permit-portal-dev:latest
    pull_policy: 'never'
    tty: true
    stdin_open: true
    build:
      context: .
      dockerfile: ./devops/docker/app/Dockerfile.dev
    env_file: .env.docker_compose
    volumes:
      - .:/app
      - /app/node_modules
      - virus_scan_tmp:/tmp/virus_scan
    ports:
      - '3000:3000'
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - vite
    environment:
      VITE_RUBY_HOST: vite
      IS_APP_SERVER: "true"
      CLAMAV_ENABLED: "true"
      CLAMAV_HOST: "127.0.0.1"
      CLAMAV_PORT: "3310"
      CLAMAV_TIMEOUT: "30"
      VIRUS_SCAN_TEMP_DIR: "/tmp/virus_scan"
      <<: *default-env-vars
    command: >
      bash -c "bundle exec rails s -b '0.0.0.0' -p 3000"

  vite:
    image: hous-permit-portal-dev:latest
    pull_policy: 'never'
    working_dir: /app
    env_file: .env.docker_compose
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      <<: *default-env-vars
      VITE_RUBY_HOST: '0.0.0.0'
    command: './bin/vite dev'
    ports:
      - '3036:3036'

  sidekiq:
    image: hous-permit-portal-dev:latest
    pull_policy: 'never'
    tty: true
    stdin_open: true
    working_dir: /app
    env_file: .env.docker_compose
    volumes:
      - .:/app
      - virus_scan_tmp:/tmp/virus_scan
    environment:
      CLAMAV_ENABLED: "true"
      CLAMAV_HOST: "127.0.0.1"
      CLAMAV_PORT: "3310"
      CLAMAV_TIMEOUT: "30"
      VIRUS_SCAN_TEMP_DIR: "/tmp/virus_scan"
      <<: *default-env-vars
    command: 'bundle exec sidekiq'
    depends_on:
      - app

  anycable-rpc:
    image: hous-permit-portal-dev:latest
    pull_policy: 'never'
    command: bundle exec anycable
    volumes:
      - .:/app
    environment:
      <<: *default-env-vars # need to inject DEVISE_JWT_SECRET_KEY and DATABASE_URL here might as well just reference the block
      ANYCABLE_REDIS_URL: redis://redis:6379/1
      ANYCABLE_RPC_HOST: '0.0.0.0:50051'
      ANYCABLE_LOG_LEVEL: debug
    ports:
      - '50051:50051'
    depends_on:
      - redis
      - app

  anycable-go:
    image: anycable/anycable-go:1.4.8
    environment:
      ANYCABLE_HOST: '0.0.0.0'
      ANYCABLE_PORT: '8080'
      ANYCABLE_RPC_HOST: anycable-rpc:50051
      ANYCABLE_REDIS_URL: redis://redis:6379/1
      ANYCABLE_LOG_LEVEL: debug
    ports:
      - '8080:8080'
    depends_on:
      - redis
      - app

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    volumes:
      - redis_data:/data

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"  # Limit heap to 512MB for development
    ports:
      - '9200:9200'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  # MinIO for local S3-compatible storage
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ClamAV for virus scanning
  # Note: ClamAV is now installed directly in the app container
  # No separate service needed

  # MinIO client for bucket setup
  minio-setup:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb myminio/uploads || true;
      /usr/bin/mc policy set public myminio/uploads || true;
      /usr/bin/mc cors set /tmp/cors.json myminio/uploads || true;
      echo 'MinIO bucket setup complete';
      "
    volumes:
      - ./docker/minio/cors.json:/tmp/cors.json:ro

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  minio_data:
  virus_scan_tmp:
